package main

// Code generated by peg grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleprogram
	rulecell
	rulelist
	ruleatom
	rulebool
	ruleint
	rulestr
	rulesymbol
	rulespace
	ruleparen
	ruledelimiter
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
)

var rul3s = [...]string{
	"Unknown",
	"program",
	"cell",
	"list",
	"atom",
	"bool",
	"int",
	"str",
	"symbol",
	"space",
	"paren",
	"delimiter",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Eval

	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushList()
		case ruleAction1:
			p.PushBool(text)
		case ruleAction2:
			p.PushInt(text)
		case ruleAction3:
			p.PushStr(text)
		case ruleAction4:
			p.PushSymbol(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 program <- <cell+> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulecell]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulecell]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(ruleprogram, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 cell <- <(space* (list / atom) space*)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
			l6:
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rulelist]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleatom]() {
						goto l4
					}
				}
			l8:
			l10:
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l11
					}
					goto l10
				l11:
					position, tokenIndex = position11, tokenIndex11
				}
				add(rulecell, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 list <- <('(' cell+ ')' Action0)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if buffer[position] != rune('(') {
					goto l12
				}
				position++
				if !_rules[rulecell]() {
					goto l12
				}
			l14:
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[rulecell]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position15, tokenIndex15
				}
				if buffer[position] != rune(')') {
					goto l12
				}
				position++
				if !_rules[ruleAction0]() {
					goto l12
				}
				add(rulelist, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 atom <- <(bool / int / str / symbol)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[rulebool]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[ruleint]() {
						goto l20
					}
					goto l18
				l20:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[rulestr]() {
						goto l21
					}
					goto l18
				l21:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[rulesymbol]() {
						goto l16
					}
				}
			l18:
				add(ruleatom, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 bool <- <(<(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> Action1)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24 := position
					{
						position25, tokenIndex25 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l26
						}
						position++
						if buffer[position] != rune('r') {
							goto l26
						}
						position++
						if buffer[position] != rune('u') {
							goto l26
						}
						position++
						if buffer[position] != rune('e') {
							goto l26
						}
						position++
						goto l25
					l26:
						position, tokenIndex = position25, tokenIndex25
						if buffer[position] != rune('f') {
							goto l22
						}
						position++
						if buffer[position] != rune('a') {
							goto l22
						}
						position++
						if buffer[position] != rune('l') {
							goto l22
						}
						position++
						if buffer[position] != rune('s') {
							goto l22
						}
						position++
						if buffer[position] != rune('e') {
							goto l22
						}
						position++
					}
				l25:
					add(rulePegText, position24)
				}
				if !_rules[ruleAction1]() {
					goto l22
				}
				add(rulebool, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 int <- <(<(([1-9] [0-9]*) / '0')> Action2)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29 := position
					{
						position30, tokenIndex30 := position, tokenIndex
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l31
						}
						position++
					l32:
						{
							position33, tokenIndex33 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position33, tokenIndex33
						}
						goto l30
					l31:
						position, tokenIndex = position30, tokenIndex30
						if buffer[position] != rune('0') {
							goto l27
						}
						position++
					}
				l30:
					add(rulePegText, position29)
				}
				if !_rules[ruleAction2]() {
					goto l27
				}
				add(ruleint, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 str <- <('"' <((!('"' / '\\') .) / '\\')*> '"' Action3)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if buffer[position] != rune('"') {
					goto l34
				}
				position++
				{
					position36 := position
				l37:
					{
						position38, tokenIndex38 := position, tokenIndex
						{
							position39, tokenIndex39 := position, tokenIndex
							{
								position41, tokenIndex41 := position, tokenIndex
								{
									position42, tokenIndex42 := position, tokenIndex
									if buffer[position] != rune('"') {
										goto l43
									}
									position++
									goto l42
								l43:
									position, tokenIndex = position42, tokenIndex42
									if buffer[position] != rune('\\') {
										goto l41
									}
									position++
								}
							l42:
								goto l40
							l41:
								position, tokenIndex = position41, tokenIndex41
							}
							if !matchDot() {
								goto l40
							}
							goto l39
						l40:
							position, tokenIndex = position39, tokenIndex39
							if buffer[position] != rune('\\') {
								goto l38
							}
							position++
						}
					l39:
						goto l37
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
					add(rulePegText, position36)
				}
				if buffer[position] != rune('"') {
					goto l34
				}
				position++
				if !_rules[ruleAction3]() {
					goto l34
				}
				add(rulestr, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 7 symbol <- <(<(!delimiter .)+> Action4)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				{
					position46 := position
					{
						position49, tokenIndex49 := position, tokenIndex
						if !_rules[ruledelimiter]() {
							goto l49
						}
						goto l44
					l49:
						position, tokenIndex = position49, tokenIndex49
					}
					if !matchDot() {
						goto l44
					}
				l47:
					{
						position48, tokenIndex48 := position, tokenIndex
						{
							position50, tokenIndex50 := position, tokenIndex
							if !_rules[ruledelimiter]() {
								goto l50
							}
							goto l48
						l50:
							position, tokenIndex = position50, tokenIndex50
						}
						if !matchDot() {
							goto l48
						}
						goto l47
					l48:
						position, tokenIndex = position48, tokenIndex48
					}
					add(rulePegText, position46)
				}
				if !_rules[ruleAction4]() {
					goto l44
				}
				add(rulesymbol, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 8 space <- <(' ' / '\n')> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				{
					position53, tokenIndex53 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l54
					}
					position++
					goto l53
				l54:
					position, tokenIndex = position53, tokenIndex53
					if buffer[position] != rune('\n') {
						goto l51
					}
					position++
				}
			l53:
				add(rulespace, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 paren <- <('(' / ')')> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l58
					}
					position++
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune(')') {
						goto l55
					}
					position++
				}
			l57:
				add(ruleparen, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 delimiter <- <(paren / space)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				{
					position61, tokenIndex61 := position, tokenIndex
					if !_rules[ruleparen]() {
						goto l62
					}
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					if !_rules[rulespace]() {
						goto l59
					}
				}
			l61:
				add(ruledelimiter, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 12 Action0 <- <{ p.PushList() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 14 Action1 <- <{ p.PushBool(text) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 15 Action2 <- <{ p.PushInt(text) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 16 Action3 <- <{ p.PushStr(text) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 17 Action4 <- <{ p.PushSymbol(text) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
